///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.10194/W32 for 8051        20/Dec/2020  11:57:03 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\D /
//                          esign\Source\IO\bh1750.c                          /
//    Command line       =  -f D:\ZStack-CC2530-2.5.1a\Projects\zstack\Sample /
//                          s\Design\CC2530DB\..\..\..\Tools\CC2530DB\f8wEnde /
//                          v.cfg (-DCPU32MHZ -DROOT=__near_func              /
//                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6        /
//                          -DMAC_CFG_RX_MAX=3) -f D:\ZStack-CC2530-2.5.1a\Pr /
//                          ojects\zstack\Samples\Design\CC2530DB\..\..\..\To /
//                          ols\CC2530DB\f8wConfig.cfg (-DZIGBEEPRO           /
//                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      /
//                          -DDEFAULT_CHANLIST=0x00080000                     /
//                          -DZDAPP_CONFIG_PAN_ID=0x38 -DNWK_START_DELAY=100  /
//                          -DEXTENDED_JOINING_RANDOM_MASK=0x007F             /
//                          -DBEACON_REQUEST_DELAY=100                        /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 D:\ZStack-CC2530-2.5.1a\Pr /
//                          ojects\zstack\Samples\Design\Source\IO\bh1750.c   /
//                          -D ZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC -D        /
//                          xMT_ZDO_FUNC -D xLCD_SUPPORTED=DEBUG -D           /
//                          xPOWER_SAVING -lC D:\ZStack-CC2530-2.5.1a\Project /
//                          s\zstack\Samples\Design\CC2530DB\Bedroom\List\    /
//                          -lA D:\ZStack-CC2530-2.5.1a\Projects\zstack\Sampl /
//                          es\Design\CC2530DB\Bedroom\List\ --diag_suppress  /
//                          Pe001,Pa010 -o D:\ZStack-CC2530-2.5.1a\Projects\z /
//                          stack\Samples\Design\CC2530DB\Bedroom\Obj\ -e     /
//                          --no_code_motion --debug --core=plain             /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\D /
//                          esign\CC2530DB\ -I D:\ZStack-CC2530-2.5.1a\Projec /
//                          ts\zstack\Samples\Design\CC2530DB\..\Source\ -I   /
//                          D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\D /
//                          esign\CC2530DB\..\Source\IO\ -I                   /
//                          D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\D /
//                          esign\CC2530DB\..\..\..\ZMain\TI2530DB\ -I        /
//                          D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\D /
//                          esign\CC2530DB\..\..\..\..\..\Components\hal\incl /
//                          ude\ -I D:\ZStack-CC2530-2.5.1a\Projects\zstack\S /
//                          amples\Design\CC2530DB\..\..\..\..\..\Components\ /
//                          hal\target\CC2530EB\ -I                           /
//                          D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\D /
//                          esign\CC2530DB\..\..\..\..\..\Components\mac\incl /
//                          ude\ -I D:\ZStack-CC2530-2.5.1a\Projects\zstack\S /
//                          amples\Design\CC2530DB\..\..\..\..\..\Components\ /
//                          mac\high_level\ -I D:\ZStack-CC2530-2.5.1a\Projec /
//                          ts\zstack\Samples\Design\CC2530DB\..\..\..\..\..\ /
//                          Components\mac\low_level\srf04\ -I                /
//                          D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\D /
//                          esign\CC2530DB\..\..\..\..\..\Components\mac\low_ /
//                          level\srf04\single_chip\ -I                       /
//                          D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\D /
//                          esign\CC2530DB\..\..\..\..\..\Components\mt\ -I   /
//                          D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\D /
//                          esign\CC2530DB\..\..\..\..\..\Components\osal\inc /
//                          lude\ -I D:\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\Design\CC2530DB\..\..\..\..\..\Components /
//                          \services\saddr\ -I D:\ZStack-CC2530-2.5.1a\Proje /
//                          cts\zstack\Samples\Design\CC2530DB\..\..\..\..\.. /
//                          \Components\services\sdata\ -I                    /
//                          D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\D /
//                          esign\CC2530DB\..\..\..\..\..\Components\stack\af /
//                          \ -I D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samp /
//                          les\Design\CC2530DB\..\..\..\..\..\Components\sta /
//                          ck\nwk\ -I D:\ZStack-CC2530-2.5.1a\Projects\zstac /
//                          k\Samples\Design\CC2530DB\..\..\..\..\..\Componen /
//                          ts\stack\sapi\ -I D:\ZStack-CC2530-2.5.1a\Project /
//                          s\zstack\Samples\Design\CC2530DB\..\..\..\..\..\C /
//                          omponents\stack\sec\ -I                           /
//                          D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\D /
//                          esign\CC2530DB\..\..\..\..\..\Components\stack\sy /
//                          s\ -I D:\ZStack-CC2530-2.5.1a\Projects\zstack\Sam /
//                          ples\Design\CC2530DB\..\..\..\..\..\Components\st /
//                          ack\zdo\ -I D:\ZStack-CC2530-2.5.1a\Projects\zsta /
//                          ck\Samples\Design\CC2530DB\..\..\..\..\..\Compone /
//                          nts\zmac\ -I D:\ZStack-CC2530-2.5.1a\Projects\zst /
//                          ack\Samples\Design\CC2530DB\..\..\..\..\..\Compon /
//                          ents\zmac\f8w\ -Ohz --require_prototypes          /
//    List file          =  D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\D /
//                          esign\CC2530DB\Bedroom\List\bh1750.s51            /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME bh1750

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?S_DIV_MOD
        EXTERN ?V0

        FUNCTION ??delay_nms?relay,0203H
        FUNCTION ??delay_nus?relay,0203H
        PUBLIC ??get_light?relay
        FUNCTION ??get_light?relay,0203H
        FUNCTION ??i2c_read?relay,0203H
        FUNCTION ??i2c_send?relay,0203H
        FUNCTION ??start_i2c?relay,0203H
        FUNCTION ??stop_i2c?relay,0203H
        PUBWEAK P0DIR
        PUBWEAK _A_P0
        FUNCTION delay_nms,080203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCTION delay_nus,080203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC get_light
        FUNCTION get_light,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        FUNCTION i2c_read,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        FUNCTION i2c_send,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        FUNCTION start_i2c,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION stop_i2c,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
get_light           SYMBOL "get_light"
??get_light?relay   SYMBOL "?relay", get_light

// D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\Design\Source\IO\bh1750.c
//    1 #include "bh1750.h"

        ASEGN SFR_AN:DATA:NOROOT,080H
// union <unnamed> volatile __sfr _A_P0
_A_P0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0fdH
// unsigned char volatile __sfr P0DIR
P0DIR:
        DATA8
        DS 1
//    2 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//    3 static void delay_nus(void)
delay_nus:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function delay_nus
        CODE
//    4 {
        ; Saved register size: 0
        ; Auto size: 0
//    5         int i;
//    6         int n = 100;
//    7         for (i = 0; i < n; i++)
        MOV     A,#0x64
//    8         {
//    9                 asm("nop");
??delay_nus_0:
        nop
//   10                 asm("nop");
        nop
//   11                 asm("nop");
        nop
//   12                 asm("nop");
        nop
//   13                 asm("nop");
        nop
//   14                 asm("nop");
        nop
//   15                 asm("nop");
        nop
//   16                 asm("nop");
        nop
//   17                 asm("nop");
        nop
//   18                 asm("nop");
        nop
//   19                 asm("nop");
        nop
//   20                 asm("nop");
        nop
//   21                 asm("nop");
        nop
//   22                 asm("nop");
        nop
//   23                 asm("nop");
        nop
//   24                 asm("nop");
        nop
//   25                 asm("nop");
        nop
//   26                 asm("nop");
        nop
//   27                 asm("nop");
        nop
//   28                 asm("nop");
        nop
//   29                 asm("nop");
        nop
//   30                 asm("nop");
        nop
//   31                 asm("nop");
        nop
//   32                 asm("nop");
        nop
//   33                 asm("nop");
        nop
//   34                 asm("nop");
        nop
//   35                 asm("nop");
        nop
//   36                 asm("nop");
        nop
//   37                 asm("nop");
        nop
//   38                 asm("nop");
        nop
//   39                 asm("nop");
        nop
//   40                 asm("nop");
        nop
//   41         }
        DEC     A
        JNZ     ??delay_nus_0
//   42 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock0
//   43 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   44 static void delay_nms(int n)
delay_nms:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function delay_nms
        CODE
//   45 {
        ; Saved register size: 0
        ; Auto size: 0
        SJMP    ??delay_nms_0
//   46         while (n--)
//   47         {
//   48                 asm("nop");
??delay_nms_1:
        nop
//   49                 asm("nop");
        nop
//   50                 asm("nop");
        nop
//   51                 asm("nop");
        nop
//   52                 asm("nop");
        nop
//   53                 asm("nop");
        nop
//   54                 asm("nop");
        nop
//   55                 asm("nop");
        nop
//   56                 asm("nop");
        nop
//   57                 asm("nop");
        nop
//   58                 asm("nop");
        nop
//   59                 asm("nop");
        nop
//   60                 asm("nop");
        nop
//   61                 asm("nop");
        nop
//   62                 asm("nop");
        nop
//   63                 asm("nop");
        nop
//   64                 asm("nop");
        nop
//   65                 asm("nop");
        nop
//   66                 asm("nop");
        nop
//   67                 asm("nop");
        nop
//   68                 asm("nop");
        nop
//   69                 asm("nop");
        nop
//   70                 asm("nop");
        nop
//   71                 asm("nop");
        nop
//   72                 asm("nop");
        nop
//   73                 asm("nop");
        nop
//   74                 asm("nop");
        nop
//   75                 asm("nop");
        nop
//   76                 asm("nop");
        nop
//   77                 asm("nop");
        nop
//   78                 asm("nop");
        nop
//   79                 asm("nop");
        nop
//   80         }
??delay_nms_0:
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     A,R0
        ADD     A,#-0x1
        DEC     R2
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     R3,A
        MOV     A,R0
        ORL     A,R1
        JNZ     ??delay_nms_1
//   81 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock1
//   82 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   83 static void start_i2c(void)
start_i2c:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function start_i2c
        CODE
//   84 {
        FUNCALL start_i2c, delay_nus
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL start_i2c, delay_nus
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL start_i2c, delay_nus
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   85         SDA_W();
        ORL     0xfd,#0x10
//   86         //LIGHT_SCK_0() ;
//   87         //delay_nus(20);
//   88         LIGHT_DTA_1(); //
        SETB    0x80.4
//   89         LIGHT_SCK_1(); //
        SETB    0x80.5
//   90         delay_nus();
        ; Setup parameters for call to function delay_nus
        LCALL   ??delay_nus?relay
//   91         LIGHT_DTA_0();
        CLR     0x80.4
        CFI EndBlock cfiBlock2
//   92         delay_nus();
        ; Setup parameters for call to function delay_nus
        REQUIRE ?Subroutine0
        REQUIRE P0DIR
        REQUIRE _A_P0
        ; // Fall through to label ?Subroutine0
//   93         LIGHT_SCK_0();
//   94         delay_nus();
//   95         //delay()  ;
//   96 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_6:
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock3
//   97 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   98 static void stop_i2c(void)
stop_i2c:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function stop_i2c
        CODE
//   99 {
        FUNCALL stop_i2c, delay_nus
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL stop_i2c, delay_nus
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL stop_i2c, delay_nus
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL stop_i2c, delay_nus
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  100         SDA_W();
        ORL     0xfd,#0x10
//  101         LIGHT_DTA_0();
        CLR     0x80.4
//  102         delay_nus();
        ; Setup parameters for call to function delay_nus
        LCALL   ?Subroutine5 & 0xFFFF
//  103         LIGHT_SCK_1();
//  104         delay_nus();
//  105         LIGHT_DTA_1();
??CrossCallReturnLabel_4:
        SETB    0x80.4
//  106         delay_nus();
        ; Setup parameters for call to function delay_nus
        SJMP    ?Subroutine0
        CFI EndBlock cfiBlock4
        REQUIRE P0DIR
        REQUIRE _A_P0
//  107         LIGHT_SCK_0();
//  108         delay_nus();
//  109 }
//  110 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  111 static char i2c_send(unsigned char val)
i2c_send:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function i2c_send
        CODE
//  112 {
        FUNCALL i2c_send, delay_nus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL i2c_send, delay_nus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL i2c_send, delay_nus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL i2c_send, delay_nus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL i2c_send, delay_nus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0 + 1,R1
//  113         int i;
//  114         char error = 0;
        MOV     ?V0 + 0,#0x0
//  115         SDA_W();
        ORL     0xfd,#0x10
//  116         for (i = 0x80; i > 0; i /= 2)
        MOV     R6,#-0x80
        MOV     R7,#0x0
//  117         {
//  118                 if (val & i)
??i2c_send_0:
        MOV     A,R6
        ANL     A,?V0 + 1
        JZ      ??i2c_send_1
//  119                         LIGHT_DTA_1();
        SETB    0x80.4
        SJMP    ??i2c_send_2
//  120                 else
//  121                         LIGHT_DTA_0();
??i2c_send_1:
        CLR     0x80.4
//  122                 delay_nus();
??i2c_send_2:
        ; Setup parameters for call to function delay_nus
        LCALL   ??delay_nus?relay
//  123                 LIGHT_SCK_1();
        SETB    0x80.5
//  124                 delay_nus();
        ; Setup parameters for call to function delay_nus
        LCALL   ?Subroutine2 & 0xFFFF
//  125                 LIGHT_SCK_0();
//  126                 delay_nus();
//  127         }
??CrossCallReturnLabel_0:
        LCALL   ?S_DIV_MOD
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_2:
        JNC     ??i2c_send_0
//  128         LIGHT_DTA_1();
        SETB    0x80.4
//  129         SDA_R();
        ANL     0xfd,#0xef
//  130         //delay_nus();
//  131         LIGHT_SCK_1();
        SETB    0x80.5
//  132         delay_nus();
        ; Setup parameters for call to function delay_nus
        LCALL   ??delay_nus?relay
//  133         if (LIGHT_DTA())
        MOV     C,0x80.4
        JNC     ??i2c_send_3
//  134                 error = 1;
        MOV     ?V0 + 0,#0x1
//  135         delay_nus();
??i2c_send_3:
        ; Setup parameters for call to function delay_nus
        LCALL   ??delay_nus?relay
//  136         LIGHT_SCK_0();
        CLR     0x80.5
        CFI EndBlock cfiBlock5
//  137         return error;
        REQUIRE ?Subroutine1
        REQUIRE P0DIR
        REQUIRE _A_P0
        ; // Fall through to label ?Subroutine1
//  138 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R1,?V0 + 0
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock6
//  139 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  140 static char i2c_read(char ack)
i2c_read:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function i2c_read
        CODE
//  141 {
        FUNCALL i2c_read, delay_nus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL i2c_read, delay_nus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL i2c_read, delay_nus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL i2c_read, delay_nus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL i2c_read, delay_nus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0 + 1,R1
//  142         int i;
//  143         char val = 0;
        MOV     ?V0 + 0,#0x0
//  144         LIGHT_DTA_1();
        SETB    0x80.4
//  145         //SDA_R();
//  146         for (i = 0x80; i > 0; i /= 2)
        MOV     R6,#-0x80
        MOV     R7,#0x0
//  147         {
//  148 
//  149                 LIGHT_SCK_1();
??i2c_read_0:
        SETB    0x80.5
//  150                 delay_nus();
        ; Setup parameters for call to function delay_nus
        LCALL   ??delay_nus?relay
//  151                 SDA_R();
        ANL     0xfd,#0xef
//  152                 if (LIGHT_DTA())
        MOV     C,0x80.4
        JNC     ??i2c_read_1
//  153                         val = (val | i);
        MOV     A,R6
        ORL     ?V0 + 0,A
//  154                 delay_nus();
??i2c_read_1:
        ; Setup parameters for call to function delay_nus
        LCALL   ?Subroutine2 & 0xFFFF
//  155                 //SDA_R();
//  156                 LIGHT_SCK_0();
//  157                 delay_nus();
//  158         }
??CrossCallReturnLabel_1:
        LCALL   ?S_DIV_MOD
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_3:
        JNC     ??i2c_read_0
//  159         SDA_W();
        ORL     0xfd,#0x10
//  160         if (ack)
        MOV     A,?V0 + 1
        JZ      ??i2c_read_2
//  161                 LIGHT_DTA_0();
        CLR     0x80.4
        SJMP    ??i2c_read_3
//  162         else
//  163                 LIGHT_DTA_1();
??i2c_read_2:
        SETB    0x80.4
//  164         delay_nus();
??i2c_read_3:
        ; Setup parameters for call to function delay_nus
        LCALL   ?Subroutine5 & 0xFFFF
//  165         LIGHT_SCK_1();
//  166         delay_nus();
//  167         LIGHT_SCK_0();
??CrossCallReturnLabel_5:
        CLR     0x80.5
//  168         LIGHT_DTA_1();
        SETB    0x80.4
//  169         return val;
        SJMP    ?Subroutine1
        CFI EndBlock cfiBlock7
        REQUIRE _A_P0
        REQUIRE P0DIR
//  170 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond8 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond9 Using cfiCommon0
        CFI (cfiCond9) NoFunction
        CFI (cfiCond9) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond9) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond9) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond9) CFA_SP SP+0
        CFI (cfiCond9) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker10 Using cfiCommon1
        CFI (cfiPicker10) NoFunction
        CFI (cfiPicker10) Picker
        LCALL   ??delay_nus?relay
        SETB    0x80.5
        ; Setup parameters for call to function delay_nus
        ; Setup parameters for call to function delay_nus
        LCALL   ??delay_nus?relay
        RET
        CFI EndBlock cfiCond8
        CFI EndBlock cfiCond9
        CFI EndBlock cfiPicker10

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond11 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond12 Using cfiCommon0
        CFI (cfiCond12) NoFunction
        CFI (cfiCond12) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond12) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond12) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond12) CFA_SP SP+0
        CFI (cfiCond12) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker13 Using cfiCommon1
        CFI (cfiPicker13) NoFunction
        CFI (cfiPicker13) Picker
        MOV     ?V0 + 2,R0
        MOV     ?V0 + 3,R1
        MOV     R6,?V0 + 2
        MOV     R7,?V0 + 3
        CLR     C
        MOV     A,R6
        SUBB    A,#0x1
        MOV     A,R7
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        RET
        CFI EndBlock cfiCond11
        CFI EndBlock cfiCond12
        CFI EndBlock cfiPicker13

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond14 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond15 Using cfiCommon0
        CFI (cfiCond15) NoFunction
        CFI (cfiCond15) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond15) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond15) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond15) CFA_SP SP+0
        CFI (cfiCond15) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker16 Using cfiCommon1
        CFI (cfiPicker16) NoFunction
        CFI (cfiPicker16) Picker
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_7:
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     R2,#0x2
        MOV     R3,#0x0
        RET
        CFI EndBlock cfiCond14
        CFI EndBlock cfiCond15
        CFI EndBlock cfiPicker16

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond17 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_6
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond18 Using cfiCommon0
        CFI (cfiCond18) NoFunction
        CFI (cfiCond18) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond18) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond18) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond18) CFA_SP SP+-5
        CFI Block cfiCond19 Using cfiCommon0
        CFI (cfiCond19) NoFunction
        CFI (cfiCond19) Conditional ??CrossCallReturnLabel_7, ??CrossCallReturnLabel_0
        CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond19) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond19) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond19) CFA_SP SP+0
        CFI (cfiCond19) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond20 Using cfiCommon0
        CFI (cfiCond20) NoFunction
        CFI (cfiCond20) Conditional ??CrossCallReturnLabel_7, ??CrossCallReturnLabel_1
        CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond20) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond20) CFA_SP SP+0
        CFI (cfiCond20) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker21 Using cfiCommon1
        CFI (cfiPicker21) NoFunction
        CFI (cfiPicker21) Picker
        LCALL   ??delay_nus?relay
        CLR     0x80.5
        ; Setup parameters for call to function delay_nus
        ; Setup parameters for call to function delay_nus
        ; Setup parameters for call to function delay_nus
        ; Setup parameters for call to function delay_nus
        LCALL   ??delay_nus?relay
        RET
        CFI EndBlock cfiCond17
        CFI EndBlock cfiCond18
        CFI EndBlock cfiCond19
        CFI EndBlock cfiCond20
        CFI EndBlock cfiPicker21
//  171 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  172 unsigned short get_light(void)
get_light:
        CFI Block cfiBlock22 Using cfiCommon0
        CFI Function get_light
        CODE
//  173 {
        FUNCALL get_light, delay_nms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL get_light, start_i2c
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL get_light, i2c_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL get_light, i2c_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL get_light, stop_i2c
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL get_light, start_i2c
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL get_light, i2c_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL get_light, i2c_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL get_light, stop_i2c
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL get_light, start_i2c
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL get_light, i2c_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL get_light, i2c_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL get_light, stop_i2c
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL get_light, delay_nms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL get_light, start_i2c
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL get_light, i2c_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL get_light, i2c_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL get_light, i2c_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL get_light, stop_i2c
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  174         unsigned char ack1 = 1;
//  175         unsigned char ack2 = 1;
//  176         unsigned char ack3 = 1;
//  177         unsigned char ack4 = 1;
//  178         unsigned char ack5 = 1;
//  179         unsigned char ack6 = 1;
//  180         unsigned char ack7 = 1;
//  181 
//  182         unsigned char t0;
//  183         unsigned char t1;
//  184         unsigned short t;
//  185 
//  186         P0DIR |= (1 << 1);
        ORL     0xfd,#0x2
//  187         delay_nms(200);
        ; Setup parameters for call to function delay_nms
        MOV     R2,#-0x38
        MOV     R3,#0x0
        LCALL   ??delay_nms?relay
//  188 
//  189         start_i2c();
        ; Setup parameters for call to function start_i2c
        LCALL   ??Subroutine7_0 & 0xFFFF
//  190         ack1 = i2c_send(0x46);
//  191         if (ack1)
??CrossCallReturnLabel_10:
        JZ      ??get_light_0
//  192                 return 255;
        MOV     R2,#-0x1
??get_light_1:
        MOV     R3,#0x0
        SJMP    ??get_light_2
//  193         ack2 = i2c_send(0x01);
//  194         if (ack2)
??get_light_0:
        ; Setup parameters for call to function i2c_send
        MOV     R1,#0x1
        LCALL   ??i2c_send?relay
        MOV     A,R1
        JZ      ??get_light_3
//  195                 return 254;
        MOV     R2,#-0x2
        SJMP    ??get_light_1
//  196         stop_i2c(); //init
??get_light_3:
        ; Setup parameters for call to function stop_i2c
        LCALL   ?Subroutine3 & 0xFFFF
//  197         start_i2c();
//  198         ack3 = i2c_send(0x46);
//  199         if (ack3)
??CrossCallReturnLabel_8:
        JZ      ??get_light_4
//  200                 return 253;
        MOV     R2,#-0x3
        SJMP    ??get_light_1
//  201         ack4 = i2c_send(0x01);
//  202         if (ack4)
??get_light_4:
        ; Setup parameters for call to function i2c_send
        MOV     R1,#0x1
        LCALL   ??i2c_send?relay
        MOV     A,R1
        JZ      ??get_light_5
//  203                 return 252;
        MOV     R2,#-0x4
        SJMP    ??get_light_1
//  204         stop_i2c(); //power
??get_light_5:
        ; Setup parameters for call to function stop_i2c
        LCALL   ?Subroutine3 & 0xFFFF
//  205         start_i2c();
//  206         ack5 = i2c_send(0x46);
//  207         if (ack5)
??CrossCallReturnLabel_9:
        JZ      ??get_light_6
//  208                 return 251;
        MOV     R2,#-0x5
        SJMP    ??get_light_1
//  209         ack6 = i2c_send(0x10);
//  210         if (ack6)
??get_light_6:
        ; Setup parameters for call to function i2c_send
        MOV     R1,#0x10
        LCALL   ??i2c_send?relay
        MOV     A,R1
        JZ      ??get_light_7
//  211                 return 250;
        MOV     R2,#-0x6
        SJMP    ??get_light_1
//  212         stop_i2c();
??get_light_7:
        ; Setup parameters for call to function stop_i2c
        LCALL   ??stop_i2c?relay
//  213         delay_nms(1500);
        ; Setup parameters for call to function delay_nms
        MOV     R2,#-0x24
        MOV     R3,#0x5
        LCALL   ??delay_nms?relay
//  214         start_i2c();
        ; Setup parameters for call to function start_i2c
        LCALL   ??start_i2c?relay
//  215 
//  216         ack7 = i2c_send(0x47);
//  217         if (ack7)
        ; Setup parameters for call to function i2c_send
        MOV     R1,#0x47
        LCALL   ??i2c_send?relay
        MOV     A,R1
        JZ      ??get_light_8
//  218                 return 249;
        MOV     R2,#-0x7
        SJMP    ??get_light_1
//  219 
//  220         t0 = i2c_read(1);
??get_light_8:
        ; Setup parameters for call to function i2c_read
        MOV     R1,#0x1
        LCALL   ??i2c_read?relay
        MOV     A,R1
        MOV     R6,A
//  221         t1 = i2c_read(0);
        ; Setup parameters for call to function i2c_read
        MOV     R1,#0x0
        LCALL   ??i2c_read?relay
        MOV     A,R1
        MOV     ?V0 + 0,A
//  222         stop_i2c();
        ; Setup parameters for call to function stop_i2c
        LCALL   ??stop_i2c?relay
//  223         t = ((short)t0) << 8;
//  224         t |= t1;
//  225         return t;
        MOV     A,R6
        MOV     R2,?V0 + 0
        MOV     R3,A
??get_light_2:
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock22
        REQUIRE P0DIR
//  226 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond23 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_8
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond24 Using cfiCommon0
        CFI (cfiCond24) NoFunction
        CFI (cfiCond24) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond24) CFA_SP SP+0
        CFI (cfiCond24) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker25 Using cfiCommon1
        CFI (cfiPicker25) NoFunction
        CFI (cfiPicker25) Picker
        LCALL   ??stop_i2c?relay
        CFI EndBlock cfiCond23
        CFI EndBlock cfiCond24
        CFI EndBlock cfiPicker25
        ; Setup parameters for call to function start_i2c
        ; Setup parameters for call to function start_i2c
        REQUIRE ??Subroutine7_0
        ; // Fall through to label ??Subroutine7_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine7_0:
        CFI Block cfiCond26 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_10
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond27 Using cfiCommon0
        CFI (cfiCond27) NoFunction
        CFI (cfiCond27) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond27) CFA_SP SP+0
        CFI (cfiCond27) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond28 Using cfiCommon0
        CFI (cfiCond28) NoFunction
        CFI (cfiCond28) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond28) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond28) CFA_SP SP+0
        CFI (cfiCond28) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker29 Using cfiCommon1
        CFI (cfiPicker29) NoFunction
        CFI (cfiPicker29) Picker
        LCALL   ??start_i2c?relay
        ; Setup parameters for call to function i2c_send
        ; Setup parameters for call to function i2c_send
        ; Setup parameters for call to function i2c_send
        MOV     R1,#0x46
        LCALL   ??i2c_send?relay
        MOV     A,R1
        RET
        CFI EndBlock cfiCond26
        CFI EndBlock cfiCond27
        CFI EndBlock cfiCond28
        CFI EndBlock cfiPicker29

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??delay_nus?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    delay_nus

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??delay_nms?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    delay_nms

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??start_i2c?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    start_i2c

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??stop_i2c?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    stop_i2c

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??i2c_send?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    i2c_send

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??i2c_read?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    i2c_read

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??get_light?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    get_light

        END
// 
// 468 bytes in segment BANKED_CODE
//  42 bytes in segment BANK_RELAYS
//   2 bytes in segment SFR_AN
// 
// 510 bytes of CODE memory
//   0 bytes of DATA memory (+ 2 bytes shared)
//
//Errors: none
//Warnings: none
